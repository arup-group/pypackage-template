{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"configuration/","title":"Input Arguments","text":"<p>The input arguments to a templated project (the questions you will be asked) are given on this page. Several of them have \"validators\" which are usually regular expressions that the answer is checked against to ensure it is a valid answer.</p> <pre><code>full_name:\n  type: str\n  default: \"Ove Arup\"\n  help: \"Your full name.\"\n\nemail:\n  type: str\n  default: \"ove.arup@arup.com\"\n  help: Your email address. Use the same one as you use on GitHub.\n  validator: &gt;-\n    {% if not (email | regex_search('^.*@.*$')) %}\n    Invalid email\n    {% endif %}\n\ngithub_username:\n  type: str\n  default: \"ovearup\"\n  help: Your GitHub username.\n  validator: &gt;-\n    {% if not (github_username | regex_search('^[^\\\\s]+$')) %}\n    GitHub username cannot contain spaces\n    {% endif %}\n\nrepository_owner:\n  type: str\n  default: \"arup-group\"\n  help: &gt;-\n    The owner of your GitHub repository (i.e., https://github.com/[repository_owner]).\n    \u2757\ufe0fNOTE\u2757\ufe0f for personal projects, this can be your GitHub username.\n    For Arup projects, this should be `arup-group`.\n  validator: &gt;-\n    {% if not (repository_owner | regex_search('^[^\\\\s]+$')) %}\n    Repository owner cannot contain spaces\n    {% endif %}\n\nproject_title:\n  type: str\n  default: \"Python Boilerplate\"\n  help: The headline name of your new Python package project. \u2757\ufe0fNOTE\u2757\ufe0f this is used in documentation, so spaces and any characters are fine here.\n\nrepository_name:\n  type: str\n  default: \"{{ project_title.lower().replace(' ', '_').replace('-', '_') }}\"\n  help: &gt;-\n    Name of the github repository where you will host your project (i.e., https://github.com/[repository_owner]/[repository_name]).\n    \u2757\ufe0fNOTE\u2757\ufe0f typically, it is the 'slugified' version of `project_title` (e.g. `My software package` -&gt; `my_software_package`)\n    or an abbreviation derived from it (e.g., `Population Activity Modeller` -&gt; `pam`).\n  validator: &gt;-\n    {% if not (repository_name | regex_search('^[^\\\\s]+$')) %}\n    Repository name cannot contain spaces\n    {% endif %}\n\npackage_name:\n  type: str\n  default: \"{{ repository_name }}\"\n  help: &gt;-\n    The name given to your package.\n    This should be available on package indexing sites (PyPI/Anaconda).\n    \u2757\ufe0fNOTE\u2757\ufe0f typically, it is the same as the `module_name`, but if your preferred package name is already taken online, you should rename your project entirely or prepend the package name with e.g. `arup-`.\n    For example, our PAM package is `pam` when imported in Python, but `cml-pam` online.\n  validator: &gt;-\n    {% if not (package_name | regex_search('^[^\\\\s]+$')) %}\n    Package name cannot contain spaces\n    {% endif %}\n\nmodule_name:\n  type: str\n  default: \"{{ repository_name }}\"\n  help: &gt;-\n    The name given to your module in Python.\n    This should be available on package indexing sites (PyPI/Anaconda).\n    \u2757\ufe0fNOTE\u2757\ufe0f typically, it is the same as the `package_name`, assuming your preferred package name is available online.\n    This is what users will call when importing your module in Python (e.g. `import pam`, even though the package name is `cml-pam`)\n    or when calling your package from the command line (if you have a command line interface).\n  validator: &gt;-\n    {% if not (module_name | regex_search('^[_a-zA-Z][_a-zA-Z0-9]+$')) %}\n    module name can only contain alphanumeric characters and underscores and cannot begin with a number.\n    {% endif %}\n\nproject_short_description:\n  type: str\n  default: \"Python Boilerplate contains all the boilerplate you need to create a Python package.\"\n  help: A 1-sentence description of what your Python package does.\n\nproject_visibility:\n  type: str\n  help: Repository visibility. Arup projects should be internal by default and can be considered for public release later.\n  default: internal\n  choices:\n    Internal:\n      value: internal\n      validator: &gt;-\n        {% if repository_owner != 'arup-group' %}\n        Internal projects must have the `arup-group` repository owner\n        {% endif %}\n    Public:\n      value: public\n\nupload_pip_package:\n  help: Upload pip package to {% if project_visibility == 'public' %}PyPI{% elif project_visibility == 'internal' %}the Arup package index{% endif %} on each release of each new version?\n  type: bool\n  default: no\n\nupload_conda_package:\n  help: Upload conda package to an {% if project_visibility == 'public' %}Anaconda channel{% elif project_visibility == 'internal' %}the Arup package index{% endif %} on each release of a new version?\n  type: bool\n  default: no\n\nupload_aws_image:\n  help: &gt;-\n    Upload the repository to AWS to build and host a Docker image of the project on each commit?\n    \u2757\ufe0fNOTE\u2757\ufe0f requires CodeBuild configuration to be updated separately to have the image built on AWS.\n  type: bool\n  default: no\n\nconda_channel:\n  help: &gt;-\n    Your channel for conda uploads, i.e. `https://anaconda.org/[conda_channel]`.\n    \u2757\ufe0fNOTE\u2757\ufe0f You will need write access to the channel to upload.\n  default: \"https://packages.arup.com/conda\"\n  when: \"{{ upload_conda_package and project_visibility == 'public' }}\"\n  validator: &gt;-\n    {% if project_visibility == 'internal' and conda_channel != \"https://packages.arup.com/conda\" %}\n    Internal projects must set the `conda_channel` to: https://packages.arup.com/conda.\n    {% endif %}\n\ncommand_line_interface:\n  help: Provide a Command Line Interface for your module?\n  type: bool\n  default: yes\n\ncreate_docker_file:\n  help: Create a Dockerfile which allows a Docker image of the project to be built in a linux virtual machine with a basic Bash entry-point?\n  type: bool\n  default: yes\n\ncreate_author_file:\n  help: Create an AUTHORS file to log multiple project authors / contributors?\n  type: bool\n  default: yes\n\ncreate_jupyter_notebook_directory:\n  help: Add an `examples` directory in which Jupyter Notebooks can be saved? These notebooks will be rendered in the documentation and will be formatted with Ruff.\n  type: bool\n  default: yes\n\ncheck_docs_accessibility_in_CI:\n  type: bool\n  default: no\n\nopen_source_license:\n  help: Choose a license for your project.\n  default: not_open_source\n  choices:\n    \"Not open source\":\n      value: not_open_source\n    \"MIT license\":\n      value: MIT\n    \"BSD license\":\n      value: BSD\n    \"Apache Software License 2.0\":\n      value: Apache-2.0\n    \"GNU General Public License v3\":\n      value: GPL-v3\n  when: \"{{ project_visibility == 'public' }}\"\n  validator: &gt;-\n    {% if project_visibility == 'public' and open_source_license == 'not_open_source' %}\n    'public' projects must have a license.\n    {% endif %}\n</code></pre>"},{"location":"stay_updated/","title":"Updating your project","text":"<p>This repository isn't just for creating your project in the first place. It can be used to update your project when fixes / features are added to the template and to update your project when you change your mind about the input parameters you used when you generated your project.</p> <p>Note</p> <p>There is a limit to how well Copier can apply updates / changes to input parameters. More likely than not, it will produce inline merge conflicts for things it tried to implement, but failed to merge in. These merge conflicts are similar to when merging GitHub branches. VSCode (and other IDEs) offers a visual interface for resolving those conflicts.</p> <p>Info</p> <p>You can run updates from within your project's development environment since <code>copier</code> is installed into it.</p>"},{"location":"stay_updated/#keeping-your-project-up-to-date","title":"Keeping your project up-to-date","text":"<p>We may make changes to this template that you want to pull into your project after you have generated it. Copier allows you to do this, and one of your project's CI workflows will verify whether there are new template updates that you might like to merge in.</p> <p>Check if there are updates:</p> <pre><code>copier update --pretend --skip-answered\n</code></pre> <p>Apply any updates that exist:</p> <pre><code>copier update --skip-answered\n</code></pre>"},{"location":"stay_updated/#changing-input-arguments-after-project-generation","title":"Changing input arguments after project generation","text":"<p>You can change your mind on the input arguments you gave when initialising the project and use <code>copier</code> to update them.</p> <p>Changing some inputs will cause you less trouble than others. For example, changing the email associated with the project will probably be seamless. Changing whether to include a CLI or example notebooks, however, may not be. This is because these changes entail the deletion of files / directories when you do not want them.</p> <p>If you are finding it difficult to make a change, you can try generating a new project with your preferred input parameters and then porting across the changes.</p> <p>Example</p> <p>To update your project to upload the package to both an Anaconda channel and to PyPI:</p> <pre><code>copier update --data upload_conda_package=\"y\" upload_pip_package=\"y\"\n</code></pre> <p>Info</p> <p>For more info, see the Coper documentation</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Note</p> <p>Did you find any of these instructions confusing? Edit this file and submit a pull request with your improvements!</p> <p>To start with, you will need a GitHub account. If you are an Arup employee, you should sign up to the Arup GitHub group.</p> <p>If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help.</p>"},{"location":"tutorial/#setting-up-your-project","title":"Setting up your project","text":"<p>Note</p> <p>We will refer to project names, directories, github accounts, etc. in this tutorial. You will be using different ones for your project, with the possible exception of <code>arup-group</code> as the <code>repository_owner</code>. For reference, here's the configuration values we will use that you will have the option to set when creating your project with copier:</p> <ul> <li><code>github_username</code>: \"ovearup\"</li> <li><code>repository_owner</code>: \"arup-group\"</li> <li><code>project_title</code>: \"Python Boilerplate\"</li> <li><code>repository_name</code>: \"python-boilerplate\"</li> <li><code>package_name</code>: \"cml-python-boilerplate\" (1)</li> <li><code>module_name</code>: \"python_boilerplate\" (2)</li> </ul> <p>Here are some of the assumptions we will make about your local system, which you will need to change as necessary:</p> <ul> <li>You have miniforge installed to give you access to <code>conda</code> in the terminal. Arup users on Windows can install <code>miniforge</code> from the Arup software shop by downloading \"VS Code for Python\".</li> <li>You store your projects on your device at <code>~/Repos</code> (Windows: <code>C:\\\\Users\\yourusername\\Repos</code>)</li> </ul> <ol> <li>The package name needs to be globally unique, i.e., not available on conda-forge or on PyPI.    This is why it could look different to <code>repository_name</code> and <code>module_name</code>.    Search for your preferred package name before setting it here.    In the City Modelling Lab, we use the <code>cml-</code> prefix if we need to make our package name unique.</li> <li>Repositories tend to use <code>-</code> between words while modules must have <code>_</code> between words as this is the name you will use to import your module in Python: <code>import python_boilerplate</code>.</li> </ol>"},{"location":"tutorial/#step-1-install-copier","title":"Step 1: Install Copier","text":"<p>First, you need to create and activate a conda environment for using Copier.</p> <p>Use your favorite method, or create an environment like this:</p> With condaWith pip <p><pre><code>conda create -n copier-env copier\n</code></pre> Activate your environment:</p> <pre><code>conda activate copier-env\n</code></pre> <pre><code>pip install -U copier\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-package","title":"Step 2: Generate Your Package","text":"<p>Now it's time to generate your Python package.</p> <p>Use copier, pointing it at the pypackage-template repository:</p> <pre><code>cd ~/Repos # (1)!\ncopier copy git@github.com/arup-group/pypackage-template.git python-boilerplate # (2)!\n</code></pre> <ol> <li> <p>Change this directory name to match where you store GitHub repositories on your device.</p> </li> <li> <p>Change <code>python-boilerplate</code> to whatever you plan your repository name to be.</p> </li> </ol> <p>You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults. The following steps are based on using the default values.</p> <p>Once complete, you will find the <code>python-boilerplate</code> directory. Change directory into this folder:</p> <pre><code>cd python-boilerplate # (1)!\n</code></pre> <ol> <li>Change <code>python-boilerplate</code> to whatever you plan your repository name to be.</li> </ol> <p>Tip</p> <p>If you are generating a project which will be hosted in <code>arup-group</code>, it will default to <code>internal</code>. This is why we set the <code>project_visibility</code> parameter to <code>internal</code> by default.</p> <p>The arguments <code>upload_conda_package</code> and <code>upload_pip_package</code> default to <code>n</code> (i.e. no upload of packages), but you can set these to <code>y</code> to upload <code>internal</code> projects to the Arup package index (https://packages.arup.com/) so long as you make a service-now request to allow access to the <code>packages</code> self-hosted runner for your repository.</p> <p>You will need to wait until the project is made public (with a suitable open source license) before you allow uploads of your package to PyPI or an Anaconda channel. When you're ready to take the leap to a public repository, you can update your project input arguments to set the project visibility to <code>public</code>. At this point, you will need to add PyPI/Anaconda upload tokens to your repository \"secrets\", as described below.</p>"},{"location":"tutorial/#step-3-create-a-github-repository","title":"Step 3: Create a GitHub Repository","text":"<p>Go to the GitHub page for <code>[repository_owner]</code>, e.g. <code>https://github.com/arup-group</code> or <code>https://github.com/ovearup</code>, and create a new repository with <code>[repository_name]</code> (<code>python-boilerplate</code>).</p> <p>Do not add anything to your account: no <code>README</code>, no <code>LICENSE</code>, no <code>.gitignore</code>. Everything will be added when you push your newly generated package.</p> <p>Once you have your repository created, go back to your command line where you are inside your newly created local project, then upload that code:</p> <pre><code>git init .\ngit add .\ngit commit -m \"Initial skeleton.\"\ngit branch -M main\ngit remote add origin git@github.com:arup-group/python-boilerplate.git # (1)!\ngit push -u origin main\n</code></pre> <ol> <li>Change <code>python-boilerplate</code> to match the name you have gave in <code>repository-name</code>.</li> </ol> <p>Where <code>arup-group</code> and <code>python-boilerplate</code> are adjusted to the host group/user for your repository and the package name, respectively.</p>"},{"location":"tutorial/#step-4-enable-github-pages-for-your-documentation","title":"Step 4: Enable GitHub pages for your documentation","text":"<p>Once you have uploaded your project to your repository, return to the repository and set up GitHub Pages to host your documentation. You should choose the <code>gh-pages</code> branch (this will only appear a few minutes after you push your first commit) under the <code>Branch</code> dropdown.</p> <p>Note</p> <p>If <code>master</code> is the default name for your primary project branch, the documentation will not build automatically. You should ensure you have renamed your primary branch to <code>main</code>.</p> <p>Warning</p> <p>If the repository is in your own user account (e.g., <code>overarup</code>), it must be a public repository to be able to host documentation using github pages. If the repository is in <code>arup-group</code>, then it can be <code>internal</code> (the default) and still host documentation using github pages.</p>"},{"location":"tutorial/#step-5-define-requirements","title":"Step 5: Define requirements","text":"<p>As well as writing the package source code, documentation, and tests, you will need to define the packages on which your project depends. You can find an almost empty requirements file for you to complete in your new project folder: <code>requirements/base.txt</code>. It cannot be empty, otherwise <code>conda</code> might complain. You can update this as you go along and need new packages in your project.</p>"},{"location":"tutorial/#step-6-create-a-development-environment-for-your-project","title":"Step 6: Create a development environment for your project","text":"<p>To install the necessary packages to develop your Python package, follow the instructions automatically generated in your new project's README / online documentation (e.g., https://arup-group.github.io/python-boilerplate).</p> <p>Note</p> <p>As you update the requirements that you define as dependencies, you should bulldoze your install and recreate it. E.g., if you create your environment using conda:</p> <pre><code>conda create -n python-boilerplate -c conda-forge --file requirements/base.txt --file requirements/dev.txt\n</code></pre> <p>You should run this exact same command after updating <code>requirements/base.txt</code> and say yes to overriding the existing <code>python-boilerplate</code> environment. This is a much better way of managing your python environments than adding the dependencies ad-hoc using <code>conda install ...</code>.</p>"},{"location":"tutorial/#step-7-tweak-the-generated-project-files-to-meet-your-specific-needs-preferences","title":"Step 7: Tweak the generated project files to meet your specific needs / preferences","text":"<p>Although we recommend you stick with the default setup provided by the template, there are a few files you may like to tweak / things you'll want to add. This list is not exhaustive, but gives you an idea of where to look.</p> <ol> <li> <p>Changing how continuous integration (CI) works. The configuration files in <code>.github/workflows</code> are based on the PAM package workflows and rely on the City Modelling Lab's reusable workflows. They will run different levels of tests when pushing new commits and when opening pull requests. You may want to change some of this configuration, e.g., the python versions that tests are run on or whether to (1) notify a slack channel when CI fails/succeeds and (2) attempt to upload the package to AWS (if the <code>upload_aws_image</code> configuration option is active).</p> </li> <li> <p>Adding repository secrets for use in CI. To upload your package to Anaconda (<code>upload_conda_package</code>), you will need an API token saved as the <code>ANACONDA_TOKEN</code> repository secret. To upload to an AWS S3 bucket (<code>upload_aws_image</code>) you will need the secrets <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, <code>AWS_S3_CODE_BUCKET</code> available in your repository. You also need secrets for initiating the Slack notification bot and uploading to an AWS S3 bucket (+ possibly some AWS terraforming). You can find all the secrets you need for different actions in the City Modelling Lab reusable workflow repository.</p> </li> </ol> <p>!!! note:     Some secrets should be stored in GitHub environments.     Namely, releasing packages to public packages indexes should be in <code>pre-release</code> (for <code>.github/workflows/pre-release.yml</code> job secrets) and <code>release</code> (for <code>.github/workflows/release.yml</code> job secrets) environments.     We recommend you then place protection rules on those environments to only allow maintainers to release the workflow jobs.</p> <ol> <li> <p>Adding logos. The <code>resources</code> directory includes a logo subdirectory that you can add any branding for your package. E.g., <code>resources/logos/title.png</code> will be shown at the top of the README, or you can add a favicon and then link it to your documentation.</p> </li> <li> <p>Updating linting strictness. We use ruff to ensure high code quality. However, it checks only for a subset of possible issues with your code. This is due to existing projects being very difficult to update to meet strict rules. If you are starting a project from scratch, you may like to add more rules for it to check from its extensive list.</p> </li> <li> <p>limiting conda build architectures. By default, the conda package (if you choose to have one built) will build one package for all architectures (i.e., windows, linux, macos, ...). Usually, your dependencies will be aligned with this: they will also be installable on any architecture. However, there are times when you might have a dependency that can not be installed on e.g., Windows. If that is the case, be sure to dive into <code>conda.recipe/meta.yaml</code> and change some lines in <code>build</code> following the comments there.</p> </li> </ol>"},{"location":"tutorial/#having-problems","title":"Having problems?","text":"<p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p> <p>Have a question or need help?</p> <p> Ask a question</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#v100-2025-03-26","title":"[v1.0.0] - 2025-03-26","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Moved to using Copier as our go-to template engine.</li> </ul>"},{"location":"CHANGELOG/#v030-2025-03-26","title":"[v0.3.0] - 2025-03-26","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>internal project upload option, to index packages on https://packages.arup.com/.</li> <li><code>project_visibility</code> option to allow internal projects to be explicitly defined.</li> <li>Human-readable prompts when baking a project (#56).</li> <li>EditorConfig file within template (#50).</li> <li>Documentation accessibility checking (#41).</li> <li>Documentation FAQ in contributing guidelines (#41).</li> <li>Markdown linting as part of CI checks (#61, #62).</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Pass test result status correctly to slack notification CI action (#59).</li> <li>Silently allowing versions to be prepended with a <code>v</code> in <code>__init__.py</code>. This is now captured by a pre-commit hook.</li> <li>Missing Ruff formatting step in pre-commit config (#51).</li> <li>Template documentation in light of accessibility issues of some features (namely, mkdocs-material annotations and task lists, and mkdocs-jupyter codeblock highlighting) (#41).</li> <li>Triggering of CI linting and codecov upload for internal (i.e. not open-source) projects (#44).</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Reference to authors in license files/sections.</li> <li><code>AUTHORS.md</code> defaults to not being created when baking a project.</li> <li><code>upload_pypi_package</code> -&gt; <code>upload_pip_package</code>.</li> <li>Recommend <code>conda</code> instead of <code>mamba</code> for project creation and package installation (#53).</li> <li>Docs CI run on PR to main or on main, with different jobs run in each case (#33).</li> <li>Docs/PR CI jobs do not trigger on github workflow changes except their own definition files (#32).</li> <li>Package test parallelisation set to automatically select the number of threads based on those available (#36).</li> <li>Move to exclusively using <code>ruff</code> for code formatting and linting; update to <code>ruff</code> version 0.6 (#43).</li> <li>Cookiecutter config set to have no license for the repository (i.e. internal IP) by default.</li> <li>Make upload and build of Docker image on AWS optional (#42).</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Reference to authors removed from <code>src/&lt;module-name&gt;/__init__.py</code>. Authors now limited to <code>pyproject.toml</code> and - optionally - <code>AUTHORS.md</code>.</li> </ul>"},{"location":"CHANGELOG/#v020-09-01-2024","title":"[v0.2.0] - 09-01-2024","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Only run AWS upload job if secrets are defined.</li> </ul>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Upload to PyPI option.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Delete conda recipe if upload to conda is not desired.</li> <li><code>index_package</code> cookiecutter parameter split into <code>upload_conda_package</code> and <code>upload_pypi_package</code>.</li> <li>Uploading to Anaconda/PyPI defaults to \"n\".</li> <li>Documentation split into separate pages for setting up and updating projects.</li> </ul>"},{"location":"CHANGELOG/#v010-05-01-2024","title":"[v0.1.0] - 05-01-2024","text":"<p>These initial changes are all relative to the original cookiecutter PyPackage repository, of which this is a fork. The list is not exhaustive as many changes have been made.</p>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>GitHub actions that rely on City Modelling Lab reusable actions.</li> <li>Schema for Cookiecutter input argument config (in <code>json</code>) + tests added to CI to validate the config and the schema itself.</li> <li>Pre-commit hooks and pre-commit CI</li> <li>Templates for different types of GitHub issues.</li> <li>Cookiecutter contributing guidelines and changelog.</li> <li>Dockerfile to generate basic Docker image from project.</li> <li>Memory profiling test template.</li> <li>Option to include recipe to build project with <code>conda</code>, ready to trigger the appropriate reusable actions to have it built and uploaded to an Anaconda channel (e.g. <code>city-modelling-lab</code>).</li> <li>Option to have a Jupyter Notebook directory (under <code>examples</code>) which will be automatically linted, formatted, tested, and rendered in the documentation.</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Documentation based on Markdown and MKDocs instead of ReStructured text and Sphinx (for improved readability and simpler configuration).</li> <li>Python project config moved from <code>setup.py</code> to <code>pyproject.toml</code>.</li> <li>Differentiating between repository name (for github), package name (for indexing online), and module name (for importing in python). This extends the original use of <code>project_name</code> and <code>project_slug</code>, the latter being difficult to understand.</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>Use of Travis CI.</li> <li>Use of Tox.</li> <li>Upload to PyPi (with a plan to reintroduce this).</li> <li>Possibility to use Argparse for CLI (i.e., Click is now the only option).</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-issues","title":"Report Issues","text":"<p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>The PyPackage template could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue or start a discussion.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> </ul>"},{"location":"CONTRIBUTING/#setting-up-and-working-in-a-development-environment","title":"Setting up and working in a development environment","text":"<p>Ready to contribute? Here's how to set up <code>pypackage-template</code> for local development. Please note this documentation assumes you already have <code>conda</code> and <code>Git</code> installed and ready to go.</p> <ol> <li> <p>Fork the <code>pypackage-template</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally in a directory of your choice (i.e., change <code>path/to/repositories</code>):</p> </li> </ol> <pre><code>cd path/to/repositories\ngit clone git@github.com:YOUR_GITHUB_USERNAME/pypackage-template.git\n</code></pre> <ol> <li>Assuming you have conda installed, you can create a new environment for your local    development by typing:</li> </ol> <pre><code>conda create -c conda-forge -n pypackage-template-dev --file requirements/dev.txt\nconda activate pypackage-template-dev\npip install --no-deps -e .\n</code></pre> <ol> <li>Install <code>pre-commit</code>, which will ensure your changes are properly formatted when you commit your code (or install extension to run Ruff and Black on save in your IDE):</li> </ol> <pre><code>pre-commit install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make your changes! If your contribution is a bug fix or new feature, you may want to add a test to the existing test suite. See Add a New Test below for details.</p> </li> <li> <p>When you're done making changes on this new branch, run the tests:</p> </li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-pr-guidelines","title":"Pull Request (PR) Guidelines","text":"<p>Before you submit a PR, check that it meets these guidelines:</p> <ol> <li> <p>The changelog has been updated.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated.    Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</p> </li> <li> <p>The PR should work for Python 3.10 - 3.12 (inclusive).    Continuous integration tests will run in your PR and will fail if your changes break anything.</p> </li> </ol>"},{"location":"CONTRIBUTING/#add-to-the-template","title":"Add to the template","text":"<p>Copier templates use Jinja templating syntax. For example, <code>{{ module_name }}</code> -&gt; <code>python_boilerplate</code> on running You can get a good feel for this by looking at the current implementation.</p> <p>The GitHub CI workflows also use the <code>{{}}</code> syntax, requiring anything that should be left behind after copier works its magic to be wrapped in {% raw %} and {% endraw %} commands.</p> <p>If you want to add an empty directory, you should add a <code>.ignore</code> file into it (e.g., see <code>resources/logos</code>). This will ensure that copier actually builds the directories.</p>"},{"location":"CONTRIBUTING/#add-a-new-test","title":"Add a New Test","text":"<p>When fixing a bug or adding features, it's good practice to add a test to demonstrate your fix or new feature behaves as expected. These tests should focus on one tiny bit of functionality and prove changes are correct.</p> <p>To write and run your new test, follow these steps:</p> <ol> <li> <p>Add the new test to <code>tests/test_copy_project.py</code>.    Focus your test on the specific bug or a small part of the new feature.</p> </li> <li> <p>If you have already made changes to the code, stash your changes and confirm all your changes were stashed:</p> </li> </ol> <pre><code>git stash\ngit stash list\n</code></pre> <ol> <li>Run your test and confirm that your test fails.    If your test does not fail, rewrite the test until it fails on the original code:</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Proceed work on your bug fix or new feature or restore your changes.    To restore your stashed changes and confirm their restoration:</li> </ol> <pre><code>git stash pop\ngit stash list\n</code></pre> <ol> <li>Rerun your test and confirm that your test passes.    If it passes, congratulations!</li> </ol>"},{"location":"","title":"Arup Python Package Template","text":"<p>Copier template for an Arup Python package.</p> <p>This template was originally based on @audreyfeldroy's original cookiecutter template. It has been updated to use latest Python Package best practices, to align with Arup's City Modelling Lab Python projects, and to use the Copier template manager.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Testing setup with pytest.</li> <li>Markdown based documentation, using mkdocs, ready for generation with GitHub pages.</li> <li>Project metadata and plugin configuration specified in a <code>pyproject.toml</code> file, according to the latest standards.</li> <li>Auto-release to your private conda channel when you create a new release on GitHub (optional).</li> <li>Command line interface using click (optional).</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>First, install the latest version of Copier:</p> <pre><code>conda create -n copier-env copier\nconda activate copier-env\n</code></pre> <p>Generate a local Python package project in a directory of your choice (change <code>my-repositories</code> to the relevant location on your device):</p> <pre><code>cd my-repositories\ncopier copy https://github.com/arup-group/pypackage-template &lt;repository-name&gt;\n</code></pre> <p><code>&lt;repository-name&gt;</code> should be the name for your repository that you will use locally (usually, the same as you plan your repository name to be on GitHub!).</p> <p>Then:</p> <ul> <li>Add the packages you will need for your project and their versions to <code>requirements/base.txt</code>.   You can remove <code>zipp</code> and the commented lines in the process.</li> <li>initialise your project as a git repository and link it to an online repository.</li> </ul> <p>For more details, see the tutorial.</p>"},{"location":"#keeping-your-project-up-to-date","title":"Keeping your project up-to-date","text":"<p>We may make changes to this template that you want to pull into your project after you have created it. Copier allows you to do this, and one of your project's CI workflows will verify whether there are new template updates that you might like to merge in.</p> <p>To check if there are updates:</p> <pre><code>copier update --pretend\n</code></pre> <p>To apply updates:</p> <pre><code>copier update\n</code></pre>"},{"location":"#not-exactly-what-you-want","title":"Not Exactly What You Want?","text":"<p>Don't worry, you have options:</p>"},{"location":"#other-arup-templates","title":"Other Arup templates","text":"<ul> <li>ESOP project template.   This is a template for starting an ESOP project.</li> <li>ESOP datashop product template.   This is a template for contributing an open API data product which will be hosted on DataBricks.</li> </ul>"},{"location":"#other-templates","title":"Other Templates","text":"<ul> <li>Calliope project snakemake module template</li> </ul> <p>Cookiecutter is another template engine, for which there are a number of Python project templates linked on the parent template repository: audreyfeldroy/cookiecutter-pypackage.</p>"},{"location":"#fork-this-create-your-own","title":"Fork This / Create Your Own","text":"<p>If you have differences in your preferred setup, you can fork this to create your own version. Or you create your own; it doesn't strictly have to be a fork.</p> <ul> <li>Once you have your own version working, add it to the \"other Arup templates\" list above with a brief description.</li> <li>It's up to you whether or not to rename your fork/own version. Do whatever you think sounds good.</li> </ul>"},{"location":"#or-submit-a-pull-request","title":"Or Submit a Pull Request","text":"<p>We also accept pull requests on this repository, if they're small!</p>"}]}